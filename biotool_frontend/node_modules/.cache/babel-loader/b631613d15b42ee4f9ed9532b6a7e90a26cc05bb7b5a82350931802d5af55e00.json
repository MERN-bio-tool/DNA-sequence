{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\Mearn project\\\\biotool_frontend\\\\src\\\\DnaVisualization.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport './DnaVisualization.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DnaVisualization = ({\n  dna,\n  complement\n}) => {\n  const saveUserData = async () => {\n    try {\n      const response = await axios.post('http://localhost:3000/api/dna-tools', {\n        dna,\n        complement\n      });\n      console.log('User data saved successfully:', response.data);\n    } catch (error) {\n      console.error('Error saving user data:', error);\n    }\n  };\n  if (!dna || !complement) return null;\n  const dnaBases = dna.split('');\n  const complementBases = complement.split('');\n\n  // Call saveUserData() every time the component renders\n  saveUserData();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dna-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dna-sequence\",\n      children: dnaBases.map((base, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `base ${base}`,\n        children: base\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dna-sequence\",\n      children: complementBases.map((base, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `base ${base}`,\n        children: base\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = DnaVisualization;\nexport default DnaVisualization;\nvar _c;\n$RefreshReg$(_c, \"DnaVisualization\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","DnaVisualization","dna","complement","saveUserData","response","post","console","log","data","error","dnaBases","split","complementBases","className","children","map","base","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/Mearn project/biotool_frontend/src/DnaVisualization.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './DnaVisualization.css';\r\n\r\nconst DnaVisualization = ({ dna, complement }) => {\r\n  const saveUserData = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3000/api/dna-tools', { dna, complement });\r\n      console.log('User data saved successfully:', response.data);\r\n    } catch (error) {\r\n      console.error('Error saving user data:', error);\r\n    }\r\n  };\r\n\r\n  if (!dna || !complement) return null;\r\n\r\n  const dnaBases = dna.split('');\r\n  const complementBases = complement.split('');\r\n\r\n  // Call saveUserData() every time the component renders\r\n  saveUserData();\r\n\r\n  return (\r\n    <div className=\"dna-visualization\">\r\n      <div className=\"dna-sequence\">\r\n        {dnaBases.map((base, index) => (\r\n          <div key={index} className={`base ${base}`}>\r\n            {base}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"dna-sequence\">\r\n        {complementBases.map((base, index) => (\r\n          <div key={index} className={`base ${base}`}>\r\n            {base}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnaVisualization;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,GAAG;EAAEC;AAAW,CAAC,KAAK;EAChD,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,qCAAqC,EAAE;QAAEJ,GAAG;QAAEC;MAAW,CAAC,CAAC;MAC7FI,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,IAAI,CAACR,GAAG,IAAI,CAACC,UAAU,EAAE,OAAO,IAAI;EAEpC,MAAMQ,QAAQ,GAAGT,GAAG,CAACU,KAAK,CAAC,EAAE,CAAC;EAC9B,MAAMC,eAAe,GAAGV,UAAU,CAACS,KAAK,CAAC,EAAE,CAAC;;EAE5C;EACAR,YAAY,CAAC,CAAC;EAEd,oBACEJ,OAAA;IAAKc,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCf,OAAA;MAAKc,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1BJ,QAAQ,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACxBlB,OAAA;QAAiBc,SAAS,EAAG,QAAOG,IAAK,EAAE;QAAAF,QAAA,EACxCE;MAAI,GADGC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNtB,OAAA;MAAKc,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1BF,eAAe,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC/BlB,OAAA;QAAiBc,SAAS,EAAG,QAAOG,IAAK,EAAE;QAAAF,QAAA,EACxCE;MAAI,GADGC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GApCItB,gBAAgB;AAsCtB,eAAeA,gBAAgB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}